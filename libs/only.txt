


       
        if(matrix[randrow][randcol].accessibile!=1){
            int rowscounter =0, colscounter=0;
            for ( rowscounter = randrow-1; rowscounter <= randrow+1 && trovato == 0; rowscounter++)
            {
                for ( colscounter = randcol-1; colscounter <= randcol+1 && trovato == 0; colscounter++)
                {
                   if(colscounter>=0 && rowscounter>=0 && rowscounter<=rows && colscounter<=cols){
                       if(matrix[rowscounter][colscounter].accessibile==1){
                           trovato=1;
                       }
                   }
                }
                
            } 
            if(trovato==0){
                matrix[randrow][randcol].accessibile=1;
                i++;
            }   
        }





                if(matrix[randrow][randcol].accessibile!=1){
            if(randrow==0 && randcol==0){
                if(matrix[randrow+1][randcol].accessibile!=1 
                && matrix[randrow+1][randcol+1].accessibile!=1 
                && matrix[randrow][randcol+1].accessibile!=1
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randrow==0 && randcol==cols)
            {
                if(matrix[randrow][randcol-1].accessibile!=1 
                && matrix[randrow+1][randcol-1].accessibile!=1 
                && matrix[randrow+1][randcol].accessibile!=1
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randrow==rows && randcol==0)
            {
                if(matrix[randrow-1][randcol].accessibile!=1 
                && matrix[randrow-1][randcol+1].accessibile!=1 
                && matrix[randrow][randcol+1].accessibile!=1
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randrow==rows && randcol==cols)
            {
                if(matrix[randrow-1][randcol].accessibile!=1 
                && matrix[randrow-1][randcol-1].accessibile!=1 
                && matrix[randrow][randcol-1].accessibile!=1
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randcol==0)
            {
                if(matrix[randrow-1][randcol].accessibile!=1 
                    && matrix[randrow-1][randcol+1].accessibile!=1 
                    && matrix[randrow][randcol+1].accessibile!=1
                    && matrix[randrow+1][randcol+1].accessibile!=1
                    && matrix[randrow+1][randcol].accessibile!=1
                    
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randcol==cols)
            {
                if(matrix[randrow-1][randcol].accessibile!=1 
                    && matrix[randrow-1][randcol-1].accessibile!=1 
                    && matrix[randrow][randcol-1].accessibile!=1
                    && matrix[randrow+1][randcol-1].accessibile!=1
                    && matrix[randrow+1][randcol].accessibile!=1
                    
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randrow==0)
            {
                if(matrix[randrow][randcol-1].accessibile!=1 
                    && matrix[randrow+1][randcol-1].accessibile!=1 
                    && matrix[randrow+1][randcol].accessibile!=1
                    && matrix[randrow+1][randcol+1].accessibile!=1
                    && matrix[randrow][randcol+1].accessibile!=1
                    
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else if (randrow==rows)
            {
                if(matrix[randrow][randcol-1].accessibile!=1 
                    && matrix[randrow-1][randcol-1].accessibile!=1 
                    && matrix[randrow-1][randcol].accessibile!=1
                    && matrix[randrow-1][randcol+1].accessibile!=1
                    && matrix[randrow][randcol+1].accessibile!=1
                    
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }else{
                if(matrix[randrow][randcol-1].accessibile!=1 
                    && matrix[randrow-1][randcol-1].accessibile!=1 
                    && matrix[randrow-1][randcol].accessibile!=1
                    && matrix[randrow-1][randcol+1].accessibile!=1
                    && matrix[randrow][randcol+1].accessibile!=1
                    && matrix[randrow+1][randcol-1].accessibile!=1 
                    && matrix[randrow+1][randcol].accessibile!=1
                    && matrix[randrow+1][randcol+1].accessibile!=1
                    
                    
                ){
                    matrix[randrow][randcol].accessibile=1;
                    i++;
                }
            }
        }










        ////////////////////////////



        int main(void)
{
    /* create message queue */
    int msqid = msgget(IPC_PRIVATE, IPC_CREAT | 0600);
    if (msqid == -1) {
        perror("msgget");

        return EXIT_FAILURE;
    }

    /* fork a child process */
    pid_t pid = fork();
    if (pid == 0) {
        /* child */

        struct message message;
        message.mtype = 23;
        memset(&(message.mtext), 0, 8192 * sizeof(char));
        (void)strcpy(message.mtext, "Hello parent!");

        /* send message to queue */
        if (msgsnd(msqid, &message, sizeof(long) + (strlen(message.mtext) * sizeof(char)) + 1, 0) == -1) {
            perror("msgsnd");

            return EXIT_FAILURE;
        }
    } else {
        /* parent */

        /* wait for child to finish */
        (void)waitpid(pid, NULL, 0);

        /* receive message from queue */
        struct message message;
        if (msgrcv(msqid, &message, 8192, 0, 0) == -1) {
            perror("msgrcv");

            return EXIT_FAILURE;
        }

        printf("%s\n", message.mtext);

        /* destroy message queue */
        if (msgctl(msqid, IPC_RMID, NULL) == -1) {
            perror("msgctl");

            return EXIT_FAILURE;
        }
    }

    return EXIT_SUCCESS;
}